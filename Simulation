library("dplyr")
library("JM")
library("JMbayes")
library("lattice")
library("mice")
library("plyr")
library ("nlme")
library("Amelia")
library("lme4")
library("survival")

x0=x1=x2=x3=x4=w0=w1=w2=w3=w4=y0=y1=y2=y3=y4=z0=z1=z2=z3=z4=NULL
bayesCI0=bayesCI1=bayesCI2=bayesCI3=bayesCI4=jointCI0=jointCI1=jointCI2=jointCI3=jointCI4=bCI0=bCI1=bCI2=bCI3=bCI4=jCI0=jCI1=jCI2=jCI3=jCI4=NULL

for(j in 1:5000)
{
print("Simulation Started")
  
  ##################################################
  # parameters for the linear mixed effects model
  betas <- c("(Intercept)"=round(runif(1, min=-5, max=5),2),"Times"=round(runif(1,0.1,0.7),2),"t_stage1" = round(runif(1,0.5,1),2), "t_stage2"=round(runif(1,0.3,0.8),2),"t_stage3"=round(runif(1,0.1,0.5),2),
             "n_stage1"=round(runif(1,0.1,0.7),2))
  
  sigma.y <- round(runif(1,0.5,2),2) # measurement error standard deviation
  
  # parameters for the survival model
  gammas <- c("(Intercept)" = round(runif(1,-1,1),2), "t_stage1" = round(runif(1,-1,1),2),"t_stage2"=round(runif(1,-1,1),2),"t_stage3"=round(runif(1,-1,1),2)) # coefficients for baseline covariates 
  alpha <- round(runif(1,0.5,1.5),2) # association parameter 
  phi <- 5 # shape for the Weibull baseline hazard 
  mean.Cens <- 2 # mean of the exponential distribution for the censoring mechanism 
  D <- round(runif(1,0.5,2),2) #random effect variance
  ##################################################
  
Simulate <- function(n) {
 
  n <- n # number of subjects # n should be multiple of 4
  K <- 4  # number of repeated measurements per subject, per outcome
  
  ################################################
  repeat{
  times<-(c(replicate(n,sort(c(rpois(1,0.7),round(rnorm(1,30,5)),round(rnorm(1,60,5)),round(rnorm(1,90,5))))))/365)
  t_stage<-rep(0:3,each=n/4)
  n_stage<-rep(0:1,each=n/2)
  DF <- data.frame(obstime = times, t_stage = factor(rep(t_stage, each = K)),n_stage = factor(rep(n_stage, K)))
  X <- model.matrix(~ obstime+t_stage+n_stage , data = DF)
  Z <- model.matrix(~  1, data = DF) 
  
  # design matrix for the survival model
  DF1=data.frame(t_stage=factor(rep(t_stage, each = 1)))
  W <- model.matrix(~ t_stage , data = DF1)
  ################################################
  
  #simulate random effects
  b <- mvrnorm(n, 0, D)
  
  # simulate longitudinal responses
  id <- rep(1:n, each = K)
  eta.y <- as.vector(X %*% betas + rowSums(Z * b[id, ])) # linear predictor
  y <- rnorm(n * K, eta.y, sigma.y)
  
  # simulate event times
  eta.t <- as.vector(W %*% gammas)
  invS <- function (t, u, i) {
    h <- function (s) {
      t_stage0 <- 3 - t_stage[i]
      t_stage1 <- 2-t_stage[i]
      t_stage2 <- 1-t_stage[i]
      t_stage3 <- t_stage[i]
      n_stage0 <- 1-n_stage[i]
      n_stage1 <- n_stage[i]
      XX <- cbind(1,s,t_stage1,t_stage2,t_stage3,n_stage1)
      ZZ <- cbind(1)
      f1 <- as.vector(XX %*% betas + rowSums(ZZ * b[rep(i, nrow(ZZ)), ]))
      exp(log(phi) + (phi - 1) * log(s) + eta.t[i] + f1 * alpha)
    }
    integrate(h, lower = 0, upper = t)$value + log(u)
  }
  u <- runif(n)
  trueTimes <- numeric(n)
  for (i in 1:n) {
    Up <- 50
    tries <- 20
    Root <- try(uniroot(invS, interval = c(1e-05, Up), u = u[i], i = i)$root, TRUE)
    while(inherits(Root, "try-error") && tries > 0) {
      tries <- tries - 1
      Up <- Up + 200
      Root <- try(uniroot(invS, interval = c(1e-05, Up), u = u[i], i = i)$root, TRUE)
    }
    trueTimes[i] <- if (!inherits(Root, "try-error")) Root else NA
  }
  na.ind <- !is.na(trueTimes)
  trueTimes <- trueTimes[na.ind]
  W <- W[na.ind,  ,drop = FALSE]
  long.na.ind <- rep(na.ind, each = K)
  y <- y[long.na.ind]
  X <- X[long.na.ind, drop = FALSE]
  Z <- Z[long.na.ind, drop = FALSE]
  DF <- DF[long.na.ind, ]
  n <- length(trueTimes)
  
  # simulate censoring times from an exponential distribution and calculate the observed event times, i.e., min(true event times, censoring times)
  Ctimes <- rexp(n, mean.Cens)
  Time <- pmin(trueTimes, Ctimes)
  event <- as.numeric(trueTimes <= Ctimes) # event indicator
  ################################################
  
  # keep the nonmissing cases, i.e., drop the longitudinal measurements that were taken after the observed event time for each subject.
  ind <- times[long.na.ind] <= rep(Time, each = K)
  y <- y[ind]
  X <- X[ind, drop = FALSE]
  Z <- Z[ind, drop = FALSE]
  id <- id[long.na.ind][ind]
  id <- match(id, unique(id))
  id.id <- unique(id)
  
  dat <- DF[ind, ]
  dat$id <- id
  dat$y <- y
  dat$Time <- Time[id]
  dat$event <- event[id]
  if(n == length(unique(id))){
    break
  }
  }
  dat.id <- data.frame(id = id.id, Time = Time, event = event, t_stage = W[,2:4])
  names(dat) <- c("obstime", "t_stage", "n_stage","id", "y", "Time", "event")
  
  return(dat)
}
simdata=Simulate(200)

print("Simulation Finished")
#########################################################

### Missing Data generation #####
print("Missing Indicator Started")
d=dim(simdata)[1]
miss_cov1=sample(c(rep(1,round(0.2*d)),rep(0,round((1-0.2)*d))))
miss_cov2=sample(c(rep(1,round(0.2*d)),rep(0,round((1-0.2)*d))))

miss_ind=c()
for(i in 1:dim(simdata)[1])
{
  if(simdata$t_stage[i]==2 && simdata$t_stage[i]==3 || simdata$n_stage[i]==1)
  {
    miss_ind[i]= rbinom(1,1,0.3)
  }else if(simdata$t_stage[i]==2 && simdata$t_stage[i]==3 || simdata$n_stage[i]==0)
  {
    miss_ind[i]= rbinom(1,1,0.2) 
  }else if(simdata$t_stage[i]==0 && simdata$t_stage[i]==1 || simdata$n_stage[i]==1)
  {
    miss_ind[i]= rbinom(1,1,0.1)
  }else
  {
    miss_ind[i]=rbinom(1,1,0.05)
  }
}
simdata1=cbind(simdata,miss_ind,miss_cov1,miss_cov2)
simdata1$t_stage=as.factor(simdata1$t_stage)
simdata1$n_stage=as.factor(simdata1$n_stage)

### missing data indicator ###

for(i in 1:dim(simdata1)[1])
{
  if(simdata1$miss_ind[i]==1)
  {
    simdata1$y[i]= NA
  }
  if(simdata1$miss_cov1[i]==1)
  {
    simdata1$t_stage[i]= NA
  }
  if(simdata1$miss_cov2[i]==1)
  {
    simdata1$n_stage[i]= NA
  }
}
# for response missingness only, the 'miss_cov1', 'miss_cov2' part will be omitted. 
print("Missing Indicator Finished")

###########################
#### Joint Model Fit ####

 simsurv<-simdata[!duplicated(simdata$id), ]
 fitlme<-lme(y~obstime+t_stage+n_stage,random = ~ 1|id,data=simdata)
 fitsurv<-coxph(Surv(Time,event)~t_stage,data=simsurv,x=TRUE)
 sim.fullJM0 <- jointModel(fitlme, fitsurv, timeVar = "obstime",method = "weibull-PH-aGH",verbose=T,control = list(iter.EM=100))
 sim.JMaBayes<-jointModelBayes(fitlme, fitsurv, timeVar = "obstime",param="td-value")
 
 x0=c(j,as.numeric(betas),as.numeric(sim.JMaBayes$postMeans$betas),as.numeric(gammas),as.numeric(sim.JMaBayes$postMeans$gammas),as.numeric(sigma.y),as.numeric(sim.JMaBayes$postMeans$sigma),D,as.numeric(sim.JMaBayes$postMeans$D),as.numeric(alpha),as.numeric(sim.JMaBayes$postMeans$alphas))
 y0=c(j,as.numeric(betas),as.numeric(sim.fullJM0$coefficients$betas),as.numeric(gammas),as.numeric(sim.fullJM0$coefficients$gammas),as.numeric(sigma.y),as.numeric(sim.fullJM0$coefficients$sigma),D,as.numeric(sim.fullJM0$coefficients$D),as.numeric(sim.fullJM0$coefficients$sigma.t),as.numeric(alpha),as.numeric(sim.fullJM0$coefficients$alpha))
 bayesCI0=t(cbind(j,sim.JMaBayes$CIs$betas,sim.JMaBayes$CIs$gammas,sim.JMaBayes$CIs$sigma,sim.JMaBayes$CIs$D,sim.JMaBayes$CIs$alphas))
 jointCI0=rbind(j,confint(sim.fullJM0, interval="confidence"),as.numeric(sqrt(diag(solve(sim.fullJM0$Hessian)))[7]),as.numeric(sqrt(diag(solve(sim.fullJM0$Hessian)))[14]))
 
 w0=rbind(w0,x0)
 bCI0=rbind(bCI0,bayesCI0)
 z0=rbind(z0,y0) 
 jCI0=rbind(jCI0,jointCI0)
 
### Imputation ######

print("Imputation STarted")
print("mice")

sim_mice=subset(simdata1,select=-c(miss_ind, miss_cov1,miss_cov2))
ini <- mice(sim_mice, maxit = 0)
meth <- ini$meth
pred<-ini$pred

# this command helps in deciding which variables will not enter the imputation model
print("pmm")
meth["y"]="pmm"
meth["t_stage"]="polr"
imp1<-mice(sim_mice,m=200,pred=pred,meth=meth,print=FALSE,maxit=500,seed=123)

# using 'pmm' methods for imputation. For 'cart', 'norm', it will change accordingly.

print("cart")
meth["y"]="cart"
meth["t_stage"]="polr"
imp2<-mice(sim_mice,m=200,pred=pred,meth=meth,print=FALSE,maxit=500,seed=246)

print("norm")
meth["y"]="norm"
meth["t_stage"]="polr"
imp3<-mice(sim_mice,m=200,pred=pred,meth=meth,print=FALSE,maxit=500)

print("Amelia")
sim_mice$t_stage=as.numeric(sim_mice$t_stage)
sim_mice$n_stage=as.numeric(sim_mice$n_stage)
imp4<-amelia(sim_mice,m=200,cs="id",ords="t_stage",noms="n_stage",p2s=2)

### pmm ###
for(i in 1:200){
  print(i)
  print("pmm analysis")
r1<-complete(imp1,i)

sim_imp_surv1<-r1[!duplicated(r1$id), ]
simlme1<-lme(y~obstime+t_stage+n_stage,random = ~1|id,data=r1)
simsurv1<-coxph(Surv(Time,event)~t_stage,data=sim_imp_surv1,x=TRUE)
sim.JMa1 <- jointModelBayes(simlme1, simsurv1, timeVar = "obstime",param="td-value")
sim.JMa111 <- jointModel(simlme1, simsurv1, timeVar = "obstime",method = "weibull-PH-GH",verbose=T,control = list(iter.EM=1000))

### cart ###
print("cart analysis")
r2<-complete(imp2,i)

sim_imp_surv2<-r2[!duplicated(r2$id), ]
simlme2<-lme(y~obstime+t_stage+n_stage,random = ~1|id,data=r2)
simsurv2<-coxph(Surv(Time,event)~t_stage,data=sim_imp_surv2,x=TRUE)
sim.JMa2 <- jointModelBayes(simlme2, simsurv2, timeVar = "obstime",param="td-value")
sim.JMa222 <- jointModel(simlme2, simsurv2, timeVar = "obstime",method = "weibull-PH-GH",verbose=T,control = list(iter.EM=10000))

### norm ###
print("norm analysis")
r3<-complete(imp3,i)

sim_imp_surv3<-r3[!duplicated(r3$id), ]
simlme3<-lme(y~obstime+t_stage+n_stage,random = ~1|id,data=r3)
simsurv3<-coxph(Surv(Time,event)~t_stage,data=sim_imp_surv3,x=TRUE)
sim.JMa3 <- jointModelBayes(simlme3, simsurv3, timeVar = "obstime",param="td-value")
sim.JMa333 <- jointModel(simlme3, simsurv3, timeVar = "obstime",method = "weibull-PH-GH",verbose=T,control = list(iter.EM=1000))

### Amelia #####
print("Amelia analysis")

r4<-imp4$imputations[[i]]
r4$t_stage=as.factor(r4$t_stage)
r4$n_stage=as.factor(r4$n_stage)

sim_imp_surv4<-r4[!duplicated(r4$id), ]
simlme4<-lme(y~obstime+t_stage+n_stage,random = ~1|id,data=r4)
simsurv4<-coxph(Surv(Time,event)~t_stage,data=sim_imp_surv4,x=TRUE)
sim.JMa4 <- jointModelBayes(simlme4, simsurv4, timeVar = "obstime",param="td-value")
sim.JMa444 <- jointModel(simlme4, simsurv4, timeVar = "obstime",method = "weibull-PH-aGH",verbose=T,control = list(iter.EM=1000))


x1=c(j,i,as.numeric(betas), as.numeric(sim.JMa1$postMeans$betas),as.numeric(gammas),as.numeric(sim.JMa1$postMeans$gammas),as.numeric(sigma.y),as.numeric(sim.JMa1$postMeans$sigma),as.numeric(D),as.numeric(sim.JMa1$postMeans$D),as.numeric(alpha),as.numeric(sim.JMa1$postMeans$alphas))
x2=c(j,i,as.numeric(betas), as.numeric(sim.JMa2$postMeans$betas),as.numeric(gammas),as.numeric(sim.JMa2$postMeans$gammas),as.numeric(sigma.y),as.numeric(sim.JMa2$postMeans$sigma),as.numeric(D),as.numeric(sim.JMa2$postMeans$D),as.numeric(alpha),as.numeric(sim.JMa2$postMeans$alphas))
x3=c(j,i,as.numeric(betas), as.numeric(sim.JMa3$postMeans$betas),as.numeric(gammas),as.numeric(sim.JMa3$postMeans$gammas),as.numeric(sigma.y),as.numeric(sim.JMa3$postMeans$sigma),as.numeric(D),as.numeric(sim.JMa3$postMeans$D),as.numeric(alpha),as.numeric(sim.JMa3$postMeans$alphas))
x4=c(j,i,as.numeric(betas), as.numeric(sim.JMa4$postMeans$betas),as.numeric(gammas),as.numeric(sim.JMa4$postMeans$gammas),as.numeric(sigma.y),as.numeric(sim.JMa4$postMeans$sigma),as.numeric(D),as.numeric(sim.JMa4$postMeans$D),as.numeric(alpha),as.numeric(sim.JMa4$postMeans$alphas))
bayesCI1=t(cbind(j,i,sim.JMa1$CIs$betas,sim.JMa1$CIs$gammas,sim.JMa1$CIs$sigma,sim.JMa1$CIs$D,sim.JMa1$CIs$tauBs,sim.JMa1$CIs$alphas))
bayesCI2=t(cbind(j,i,sim.JMa2$CIs$betas,sim.JMa2$CIs$gammas,sim.JMa2$CIs$sigma,sim.JMa2$CIs$D,sim.JMa2$CIs$tauBs,sim.JMa2$CIs$alphas))
bayesCI3=t(cbind(j,i,sim.JMa3$CIs$betas,sim.JMa3$CIs$gammas,sim.JMa3$CIs$sigma,sim.JMa3$CIs$D,sim.JMa3$CIs$tauBs,sim.JMa3$CIs$alphas))
bayesCI4=t(cbind(j,i,sim.JMa4$CIs$betas,sim.JMa4$CIs$gammas,sim.JMa4$CIs$sigma,sim.JMa4$CIs$D,sim.JMa3$CIs$tauBs,sim.JMa4$CIs$alphas))


y1=c(j,i,as.numeric(betas),as.numeric(sim.JMa111$coefficients$betas),as.numeric(gammas),as.numeric(sim.JMa111$coefficients$gammas),as.numeric(sigma.y),as.numeric(sim.JMa111$coefficients$sigma),as.numeric(alpha),as.numeric(sim.JMa111$coefficients$alpha),as.numeric(sim.JMa111$coefficients$sigma.t),D,as.numeric(sim.JMa111$coefficients$D))
y2=c(j,i,as.numeric(betas),as.numeric(sim.JMa222$coefficients$betas),as.numeric(gammas),as.numeric(sim.JMa222$coefficients$gammas),as.numeric(sigma.y),as.numeric(sim.JMa222$coefficients$sigma),as.numeric(alpha),as.numeric(sim.JMa222$coefficients$alpha),as.numeric(sim.JMa222$coefficients$sigma.t),D,as.numeric(sim.JMa222$coefficients$D))
y3=c(j,i,as.numeric(betas),as.numeric(sim.JMa333$coefficients$betas),as.numeric(gammas),as.numeric(sim.JMa333$coefficients$gammas),as.numeric(sigma.y),as.numeric(sim.JMa333$coefficients$sigma),as.numeric(alpha),as.numeric(sim.JMa333$coefficients$alpha),as.numeric(sim.JMa333$coefficients$sigma.t),D,as.numeric(sim.JMa333$coefficients$D))
y4=c(j,i,as.numeric(betas),as.numeric(sim.JMa444$coefficients$betas),as.numeric(gammas),as.numeric(sim.JMa444$coefficients$gammas),as.numeric(sigma.y),as.numeric(sim.JMa444$coefficients$sigma),as.numeric(alpha),as.numeric(sim.JMa444$coefficients$alpha),as.numeric(sim.JMa444$coefficients$sigma.t),D,as.numeric(sim.JMa444$coefficients$D))
jointCI1=rbind(j,i,confint(sim.JMa111, interval="confidence"),as.numeric(sqrt(diag(solve(sim.JMa111$Hessian)))[7]),as.numeric(sqrt(diag(solve(sim.JMa111$Hessian)))[14]))
jointCI2=rbind(j,i,confint(sim.JMa222, interval="confidence"),as.numeric(sqrt(diag(solve(sim.JMa222$Hessian)))[7]),as.numeric(sqrt(diag(solve(sim.JMa222$Hessian)))[14]))
jointCI3=rbind(j,i,confint(sim.JMa333, interval="confidence"),as.numeric(sqrt(diag(solve(sim.JMa333$Hessian)))[7]),as.numeric(sqrt(diag(solve(sim.JMa333$Hessian)))[14]))
jointCI4=rbind(j,i,confint(sim.JMa444, interval="confidence"),as.numeric(sqrt(diag(solve(sim.JMa444$Hessian)))[7]),as.numeric(sqrt(diag(solve(sim.JMa444$Hessian)))[14]))

w1=rbind(w1,x1)
w2=rbind(w2,x2)
w3=rbind(w3,x3)
w4=rbind(w4,x4)
bCI1=rbind(bCI1,bayesCI1)
bCI2=rbind(bCI2,bayesCI2)
bCI3=rbind(bCI3,bayesCI3)
bCI4=rbind(bCI4,bayesCI4)


z1=rbind(z1,y1) 
z2=rbind(z2,y2)
z3=rbind(z3,y3)
z4=rbind(z4,y4)
jCI1=rbind(jCI1,jointCI1)
jCI2=rbind(jCI2,jointCI2)
jCI3=rbind(jCI3,jointCI3)
jCI4=rbind(jCI4,jointCI4)

print("output done")
}
} 
